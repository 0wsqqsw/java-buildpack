#!/usr/bin/env ruby
# Encoding: utf-8
# Cloud Foundry Java Buildpack
# Copyright (c) 2013 the original author or authors.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# JVM memory settings calculator.
#
# It should be placed in the buildpack diagnostic directory so it logs to
# the same log file as the rest of the buildpack.

dir = File.join(File.expand_path(File.dirname(__FILE__)), 'lib')
$:.unshift dir

require 'java_buildpack/buildpack'
require 'java_buildpack/jre/memory/openjdk_memory_heuristic_factory'
require 'java_buildpack/util/tokenized_version'
require 'time'

$stdout.sync = true
$stderr.sync = true

build_dir = File.join(dir, '..', '..', 'lib')

module MemCalc

  def self.log(log_data)
    log_file_name = "#{File.dirname(__FILE__)}/@@LOG_FILE_NAME@@"
    File.open(log_file_name, 'a') do |log_file|
      log_file.sync = true
      log_file.write "#{log_data} @ #{MemCalc.time_in_millis}\n"
      log_file.fsync
    end
  end

  def self.time_in_millis
    Time.now.xmlschema(3).sub(/T/, ' ')
  end

  def self.memory
    sizes         = @@MEMORY_SIZES@@
    heuristics    = @@MEMORY_HEURISTICS@@
    version       = JavaBuildpack::Util::TokenizedVersion.new(@@JRE_VERSION@@)
    JavaBuildpack::Jre::OpenJDKMemoryHeuristicFactory.create_memory_heuristic(sizes, heuristics, version).resolve
  end

end

begin
  JavaBuildpack::Buildpack.drive_buildpack_with_logger(build_dir, 'Compile failed with exception %s') do |_|
    settings = MemCalc.memory
    MemCalc.log("#{__FILE__} calculated JVM memory settings: `#{settings}`")
    puts settings.join ' '
  end
rescue => e
  MemCalc.log("#{__FILE__} failed with exception #{e.inspect}, #{e.backtrace}\n")
  abort e.message
end
